//Story Pizza-1: Karen asks her father, Mike, for a slice of pizza and her father gives it to her.
event(pp1,[Goal = [Goal]-
	     -actor->[Human :Karen = [Human: Karen]-
						-Age->[Age:Kid],
						-Hair->[Hair]-Color->[Color:Blond],
						-Eyes->[Eyes]-Color->[Color:Blue]
		     ],
	     -goal->[Poss_By = [Poss_By]-
				    -actor->[Human: Karen],
				    -object->[Pizza: pizza001],
				    -State_Value->[State_Value:Yes_State_Value]
		    ],
	     -plan->[Plan = [Plan]-RealizedBy->[MTrans = [MTrans]-
							-actor->[Human: Karen],
							-to->[Human : Mike = [Human:Mike]-
									-Age->[Age: Grown_Up],
									-Hair->[Hair]-Color->[Color:Brown],
									-Eyes->[Eyes]-Color->[Color:Green]
					     	     	     ]<-Father-[Human: Karen],
							-object->[ATrans = [ATrans]-
									-actor->[Human:Mike],
									-object->[Pizza:Pizza001],
									-to->[Human:Karen]

						 	 	 ]
					     	]
		    ],
	     -outcome->[Success_Goal_Outcome]
]).
//Story Zoo-1: Karen wants to go to the zoo. She asks Mike to take her to the zoo. Her goal succeeds.
event(zz1,[Goal = [Goal]-
	     -actor->[Human :Karen = [Human: Karen]-
						-Age->[Age:Kid],
						-Hair->[Hair]-Color->[Color:Blond],
						-Eyes->[Eyes]-Color->[Color:Blue]
		     ],
	     -goal->[Location = [Location]-
					-actor->[Human: Karen],
					-object->[Zoo :Zoo001],
					-State_Value->[State_Value:Yes_State_Value]
		    ],
	     -plan->[Plan = [Plan]-RealizedBy->[MTrans = [MTrans]-
							-actor->[Human: Karen],
							-to->[Human : Mike = [Human:Mike]-
									-Age->[Age: Grown_Up],
									-Hair->[Hair]-Color->[Color:Brown],
									-Eyes->[Eyes]-Color->[Color:Green]
					     	     	     ]<-Father-[Human: Karen],
							-object->[PTrans = [PTrans]-
									-actor->[Human:Mike],
									-object->[Human:Karen],
									-to->[Zoo:Zoo001]

						 	 	 ]
					     	]
		    ],
	     -outcome->[Success_Goal_Outcome]
]).

//Story Refrigerator-1: Karen wants to open the refrigerator. She pulls on the door, but it doesn't open.
event(rr1,[Goal = [Goal]-
	     -actor->[Human :Karen = [Human: Karen]-
						-Age->[Age:Kid],
						-Hair->[Hair]-Color->[Color:Blond],
						-Eyes->[Eyes]-Color->[Color:Blue]
		     ],
	     -goal->[Open = [Open]-
				-object->[Refrigerator: Refrigerator001 =
						[Refrigerator: Refrigerator001]-Color->[Color:White]
					 ],
				-State_Value->[State_Value:Yes_State_Value]
		    ],
	     -plan->[Plan = [Plan]-RealizedBy->[Propel = [Propel]-
							-actor->[Human: Karen],
							-object->[Door]<-Door-[Refrigerator: Refrigerator001]
					       ]
		    ],
	     -outcome->[failure_Goal_Outcome]
]).

//Story play-doh-1: Lynn wants some Play Doh. She asks Mike to give her some, and her goal succeeds.
event(dd1,[Goal = [Goal]-
	     -actor->[Human :Lynn = [Human: Lynn]-
						-Age->[Age:Kid],
						-Hair->[Hair]-Color->[Color:Blond],
						-Eyes->[Eyes]-Color->[Color:Blue]
		     ],
	     -goal->[Poss_By = [Poss_By]-
				    -actor->[Human: Lynn],
				    -object->[Play_Doh: Play_Doh001],
				    -State_Value->[State_Value:Yes_State_Value]
		    ],
	     -plan->[Plan = [Plan]-RealizedBy->[MTrans = [MTrans]-
							-actor->[Human: Lynn],
							-to->[Human : Mike = [Human:Mike]-
									-Age->[Age: Grown_Up],
									-Hair->[Hair]-Color->[Color:Brown],
									-Eyes->[Eyes]-Color->[Color:Green]
					     	     	     ]<-Father-[Human: Lynn],
							-object->[ATrans = [ATrans]-
									-actor->[Human:Mike],
									-object->[Play_Doh: Play_Doh001],
									-to->[Human:Lynn]
						 	 	 ]
					     	]
		    ],
	     -outcome->[Success_Goal_Outcome]
]).

//Story Cookie-1: Karen asks her sister, Lynn, for a cookie and her sister gives it to her.
event(cc1,[Goal = [Goal]-
	     -actor->[Human :Karen = [Human: Karen]-
						-Age->[Age:Kid],
						-Hair->[Hair]-Color->[Color:Blond],
						-Eyes->[Eyes]-Color->[Color:Blue]
		     ],
	     -goal->[Poss_By = [Poss_By]-
				    -actor->[Human: Karen],
				    -object->[Cookie: Cookie001],
				    -State_Value->[State_Value:Yes_State_Value]
		    ],
	     -plan->[Plan = [Plan]-RealizedBy->[MTrans = [MTrans]-
							-actor->[Human: Karen],
							-to->[Human : Lynn = [Human:Lynn]-
									-Age->[Age: Kid],
									-Hair->[Hair]-Color->[Color:Blond],
									-Eyes->[Eyes]-Color->[Color:Blue]
					     	     	     ]<-Sister-[Human: Karen],
							-object->[ATrans = [ATrans]-
									-actor->[Human:Lynn],
									-object->[Cookie:Cookie001],
									-to->[Human:Karen]

						 	 	 ]
					     	]
		    ],
	     -outcome->[Success_Goal_Outcome]
]).


//---------------------------------------------GenRules-----------------------------------------------------------
genRule1([Act = [_Act]-object->[_Object = _obj]]-after->[State = 	
                                            [State_Value: _StValue]<-State_Value-[_State]-object->[_Object = _obj]],
        [Act = [_Act]-object->[_Object = _obj]]-result->[State = 	
                                            [State_Value: _StValue]<-State_Value-[_State]-object->[_Object = _obj]]).


genRule2([Act = [_Act]-object->[_Object = _obj]]-after->[State = 	
                                 [State_Value: _StValue]<-State_Value-[_State]-object->[_Object = _obj]],
        [Act = [_Act]-object->[_Object]]-result->[State = 	
                                 [State_Value: _StValue]<-State_Value-[_State]-object->[_Object]],[_Object = _obj]).


genRule([Act = [_Act1]-object->[_object = _obj]]
	-after->[Act = [_Act2]-object->[_Object = _obj]]
	-after->[State = [State_Value: _StValue]<-State_Value-[_State]-object->[_Object = _obj]],
	[_Act1 = [_Act1]-object->[_Object]]
	   -result->[_State1 = [State_Value: _StValue1]<-State_Value-[_State1]-object->[_Object]]
		-enables->[_Act2 = [_Act2]-object->[_Object]]
			-result->[_State2 = [State_Value: _StValue2]<-State_Value-[_State2]-object->[_Object]]).


//---------------------------------------------DataTDL-----------------------------------------------------------

//Lynn dropped a clear glass cup and the cup breaks
event(gl1,[Act= [Act = [Propel]-
                  	  -actor->[Human :Lynn = [Human :Lynn]-
							-Age->[Age:Kid],
							-Hair->[Hair]-Color->[Color:Blond],
							-Eyes->[Eyes]-Color->[Color:Blue]
		         	   ],
                  	  -object->[Cup = [Cup]-
						-Composition->[Composition : glass],
						-Color->[Color : Clear],
						-ID->[ID:Glass001]
	                   	    ],
                          -to->[Floor = [Floor]-Location->[Kitchen]]
							     	
      	    ]-after->[State = [Broken]-                 
		 			-object->[Cup = [Cup]-
						     -Composition->[Composition : glass],
						     -Color->[Color : Clear],
						     -ID->[ID:Glass001]
				         ]
					-State_Value->[State_Value:Yes_State_Value]]
			]).

//Lynn dropped a red plastic cup and nothing happened
event(gl2, [Act = [Propel]-
                  	  -actor->[Human :Lynn = [Human :Lynn]-
							-Age->[Age:Kid],
							-Hair->[Hair]-Color->[Color:Blond],
							-Eyes->[Eyes]-Color->[Color:Blue]
		         	   ],
                  	  -object->[Cup = [Cup]-
						-Composition->[Composition : plastic],
						-Color->[Color : red],
						-ID->[ID:Glass002]
	                   	    ],
                          -to->[Floor = [Floor]-Location->[Kitchen]]
							     	
      	    ]-after->[State = [Broken]-                 
		 			-object->[Cup = [Cup]-
						     -Composition->[Composition : Plastic],
						     -Color->[Color : red],
						     -ID->[ID:Glass002]
				         ]
					-State_Value->[State_Value:No_State_Value]
			]).

//Lynn dropped a red glass cup and the cup breaks
event(gl3, [Act = [Propel]-
                  	  -actor->[Human :Lynn = [Human :Lynn]-
							-Age->[Age:Kid],
							-Hair->[Hair]-Color->[Color:Blond],
							-Eyes->[Eyes]-Color->[Color:Blue]
		         	   ],
                  	  -object->[Cup = [Cup]-
						-Composition->[Composition : glass],
						-Color->[Color : Red],
						-ID->[ID:Glass003]
	                   	    ],
                          -to->[Floor = [Floor]-Location->[Kitchen]]
							     	
      	    ]-after->[State = [Broken]-                 
		 			-object->[Cup = [Cup]-
						     -Composition->[Composition : glass],
						     -Color->[Color : Red],
						     -ID->[ID:Glass003]
				         ]
					-State_Value->[State_Value:Yes_State_Value]
			]).


//---------------------------------------------Economic rules-----------------------------------------------------

//sell results in possessing
rules([Act = [Atrans : sell]-
			     -object->[_Object1 = _obj1],
			     -to->[_Object2 = _obj2],
			     -State_Value->[State_Value:Yes_State_Value]
		]
	  -result->[State = [Possess]-
				 -object->[_Object1 = _obj1],
				 -actor->[_actor = _act],
				 -State_Value->[State_Value:Yes_State_Value]
		  ]
).

//refuse to sell results in demand increase
rules([Act = [Atrans : sell]-
			     -object->[_Object1 = _obj1],
			     -actor->[_Polity1 = [_Pol1]-exports->[_Object1 = _obj1]],
			     -to->[_Polity2 = [_Pol2]-imports->[_Object1 = _obj1]],
			     -State_Value->[State_Value:No_State_Value]
		]
	  -result->[State = [Demand_Increase]-
					 -object->[_Object1 = _obj1],
					 -actor->[_Polity2 = _Pol2],
					 -State_Value->[State_Value:Yes_State_Value]
		  ]
).

//demand increase results in price increase
rules([State = [Demand_Increase]-
			-object->[_Object1 = _obj1],
			-actor->[_Polity = [_Polity = _pol]-economic_health->[economic_health : Strong]],
			-State_Value->[State_Value:Yes_State_Value]
	]
	-enables-> [Act = [Atrans : sell]-
			     -object->[_Object1 = _obj1],
			     -actor->[_Polity1 = [_Pol1]-
						      -exports->[_Object1 = _obj1],
						      -business_relationship->[_Polity = _pol]
					],
			     -to->[_Polity = _pol],
			     -price->[_Money = [_mony]-value->[value : sup_market]],
			     -State_Value->[State_Value:Yes_State_Value]
	          ]  
).

//---------------------------------------------Coercion-----------------------------------------------------
def_schema([Act = [Coerce]-
                  	  -actor->[Polity = _actor],
                  	  -object->[Object = _Object],
                  	  -target->[Polity = _target],
                  	  -demand->[Act = _demand],
                  	  -threat->[Act = _threat],
			  -response->[Act = _response],
                  	  -result->[State = _result]
		   ],
		[_threat]-after->[_response]-after->[_result]
).

//---------------------------------------------Economic sanction-----------------------------------------------------
event(coer,[Act = [Coerce]-
                  	  -actor->[Polity  = [Country : australia]-
							-language->[Language:English],
							-location->[Location:Southern_hemisphere],
							-government->[government:democracy],
							-economic_health->[economic_health:Strong],
							-continent->[continent:australie],
							-exports->[Object = _Obj],
							-imports->[oil]
		         	   ],
                  	  -object->[Object = [Commodity : uranium]],
                  	  -target->[Polity = [Country : France]-
							-language->[Language:French],
							-location->[Location:Northern_hemisphere],
							-government->[government:democracy],
							-economic_health->[economic_health:Strong],
							-continent->[continent:Europe],
							-exports->[object = [Commodity : wine]],
							-imports->[Object = _Obj]
		         	   ],
                  	  -demand->[Act = [Propel : explode]-
							-actor->[Actor = _target],
							-object->[Object = [weapons : nuclear]],
							-location->[Location:Southern_hemisphere],
							-State_Value->[State_Value:No_State_Value]
					],
                  	  -threat->[Act = [Atrans : sell]-
							-actor->[Actor = _actorDescr],
							-object->[Object = _Obj],
							-to->[Actor = _target],
							-State_Value->[State_Value:No_State_Value]
					],
			  -response->[Act = [Atrans : sell]-
						-actor->[Polity  = [country : South_africa]-
							-language->[Language:English],
							-location->[Location:Southern_hemisphere],
							-business_relationship->[Actor = _target],
							-continent->[continent:Africa],
							-exports->[Object = _Obj],
							-imports->[oil]
							],
						-object->[Object = _Obj],
			     			-price->[Price = [Money = 3000000]-
									-currency->[Currency : Dollars],
									-value->[value : sup_market]],
						-to->[Actor = _target],
						-State_Value->[State_Value:Yes_State_Value]
					],
                  	  -result->[State = [Possess]-
					 -object->[Object = _Obj],
					 -actor->[Actor = _target],
					 -State_Value->[State_Value:Yes_State_Value]
		 		 ]
]).